#!/bin/bash -e

eval "$(cli-shezargs $@)"

#
# Pulls a credential from S3, decrypts it and puts it on a remote host during
# a run-from-ami
#
cpit() {
  the_pathname="$1"
  project="$2"
  ip="$3"

  the_filename="$(basename $the_pathname)"
  the_dir="$(dirname $the_pathname)"

  # The only tricky thing is to put it into scotty's user area, or into a root dir
  if pull-secret --project="$project" $the_filename; then
    scpix ~/stmp/$the_filename "$ip:~/" && rm ~/stmp/$the_filename

    if [[ $the_dir =~ scotty ]]; then
      sshix $ip "mkdir -p $the_dir && cd $the_dir && mv $HOME/$the_filename ./ && chmod 0400 $the_filename"
    else
      sshix $ip "sudo mkdir -p $the_dir && cd $the_dir && sudo mv $HOME/$the_filename ./ && sudo chmod 0400 $the_filename && sudo chown root:root $the_filename"
    fi

  fi
}

# Force js-cluster/run-instance to use my PID, so I can know what IP the instance was launched as
as_pid="$$"

# Get the big configuration JSON object
configuration="/tmp/configuration-$$.json"
ra invoke $scripts_dir/../ra-scripts/cluster-config.js configuration > $configuration

# ---------- Run via js-cluster/run-instance ----------
cd "$(fd ~/dev/ js-cluster$)"
./build-scripts/run-instance --skip-start --as-pid="$as_pid" --project-id="sa" --namespace="serverassist" "$orig_args"

# Get the IP, die if we cannot
ip="$(cat /tmp/run-instance-from-ami-${service}-${as_pid}.json | underscore select '.InstanceId ~ .PrivateIpAddress' --outfmt=text)"

[[ -z $ip ]] && die "no ip"
cd "${start_dir}"

# Now, find all the certs and keys needed by the new instance

# Only pertains to web instances
if [[ $stack == web ]]; then
  for fqdn in $(cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | keys | .[]"); do
    echo $fqdn

    # Un-comment this line to see what the JSON looks like
    #cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | .[\"$fqdn\"]"

    project="$(cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | .[\"$fqdn\"] | .projectName")"

    file="$(cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | .[\"$fqdn\"] | .certfile")"
    [[ -n $file && $file != null ]] && cpit $(echo $file | jq -r '.[]') $project $ip

    file="$(cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | .[\"$fqdn\"] | .keyfile")"
    [[ -n $file && $file != null ]] && cpit $(echo $file | jq -r '.[]') $project $ip

    file="$(cat $configuration | jq -r ".result | .subStacks | .[\"$color-$stack\"] | .fqdns | .[\"$fqdn\"] | .clientCert")"
    [[ -n $file && $file != null ]] && cpit $(echo $file | jq -r '.[]') $project $ip
  done
fi

# Finish the startup process
ra invoke `fn ~/dev/ ssh\.js$` sshRun --ip=${ip} --command="./build-scripts/on-instance/b01-start-from-snapshot"  --message="${service}-sfss"
ra invoke `fn ~/dev/ ssh\.js$` sshRun --ip=${ip} --command="./build-scripts/on-instance/b02-start-services"       --message="${service}-start"


