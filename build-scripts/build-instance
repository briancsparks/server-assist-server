#!/bin/bash -e

[[ -n $NAMESPACE                    ]] && namespace="$NAMESPACE"
[[ -n $JS_CLUSTER_DB_IP             ]] && db="$JS_CLUSTER_DB_IP"
[[ -n $JS_CLUSTER_DB_HOSTNAME       ]] && db="$JS_CLUSTER_DB_HOSTNAME"
[[ -n $JS_CLUSTER_UTIL_IP           ]] && util="$JS_CLUSTER_UTIL_IP"
[[ -n $JS_CLUSTER_UTIL_HOSTNAME     ]] && util="$JS_CLUSTER_UTIL_HOSTNAME"

# SERVERASSIST has precedence
[[ -n $SERVERASSIST_DB_IP           ]] && db="$SERVERASSIST_DB_IP"
[[ -n $SERVERASSIST_DB_HOSTNAME     ]] && db="$SERVERASSIST_DB_HOSTNAME"
[[ -n $SERVERASSIST_UTIL_IP         ]] && util="$SERVERASSIST_UTIL_IP"
[[ -n $SERVERASSIST_UTIL_HOSTNAME   ]] && util="$SERVERASSIST_UTIL_HOSTNAME"

# The cheapest thing with high network
instance_type="c4.xlarge"
on_instance_build_dir="build-sa"

eval "$(cli-shezargs $@)"

die() {
  echo "Usage: $0 options $@" 2>&1
  echo ""
  echo "  (cd ~/dev/server-assist-server && time ./build-scripts/build-instance --service=web --stack=cluster --color=green --skip-ami)"
  echo ""
  echo "          --service=app --ip=10.13.23.91 --key=serverassist_demo --bucket-namespace=mobilewebprint --stack=cluster" 2>&1
  echo "          --service=app --ip=10.13.23.91 --key=serverassist_demo --bucket-namespace=mobilewebprint --stack=cluster" 2>&1
  echo ""
  echo "  Options:"
  echo ""
  echo "          --dry-run"
  echo "          --ruby"
  echo "          --skip-ami"
  echo "          --no-terminate"
  echo "          --build-number=20"
  echo "          --db=10.13.21.229"
  echo "          --util=10.13.21.4"
  echo "          --namespace="
  echo "          --image-id="
  echo "          --instance-type="
  echo "          --xvdf="
  echo "          --color="
  echo ""
  echo "  $@"
  echo ""
  exit 1
}


# These do not have automatic fixes. Fail early for them
[[ -n $stack                ]] || die "Missing --stack"
[[ -n $color                ]] || die "Missing --color"
[[ -n $service              ]] || die "Missing --service"

config="/tmp/config-$$.json"
ra invoke "$(fn ~/dev/ 'serverassist/ra-scripts/models/project\.js$')" findProject --id=sa > "${config}"

if   [[ $stack =~ ^pub      ]]; then   config_key="$(jsaws-get $config '.awsProdKey')";  config_class_b="$(jsaws-get $config '.prodClassB')"
elif [[ $stack =~ ^prod     ]]; then   config_key="$(jsaws-get $config '.awsProdKey')";  config_class_b="$(jsaws-get $config '.prodClassB')"
elif [[ $stack =~ ^cluster  ]]; then   config_key="$(jsaws-get $config '.awsDevKey')";   config_class_b="$(jsaws-get $config '.clusterClassB')"
elif [[ $stack =~ ^test     ]]; then   config_key="$(jsaws-get $config '.awsDevKey')";   config_class_b="$(jsaws-get $config '.testClassB')"
elif [[ $stack =~ ^dev      ]]; then   config_key="$(jsaws-get $config '.awsDevKey')";   config_class_b="$(jsaws-get $config '.testClassB')"
elif [[ $stack =~ ^burn     ]]; then   config_key="$(jsaws-get $config '.awsDevKey')";   config_class_b="$(jsaws-get $config '.testClassB')"
fi

if   [[ $service =~ ^web    ]]; then   config_class_d="10"
elif [[ $service =~ ^rip    ]]; then   config_class_d="16"
elif [[ $service =~ ^app    ]]; then   config_class_d="32"
elif [[ $service =~ ^netapp ]]; then   config_class_d="100"
elif [[ $service =~ ^cont   ]]; then   config_class_d="200"
elif [[ $service =~ ^util   ]]; then   config_class_d="4"
elif [[ $service =~ ^db     ]]; then   config_class_d="220"
fi

if   [[ $color == green     && $service =~ ^web   ]]; then   config_class_c="0"
elif [[ $color == blue      && $service =~ ^web   ]]; then   config_class_c="1"
elif [[ $color == teal      && $service =~ ^web   ]]; then   config_class_c="2"
elif [[ $color == yellow    && $service =~ ^web   ]]; then   config_class_c="3"

elif [[ $color == green     ]]; then   config_class_c="21"
elif [[ $color == blue      ]]; then   config_class_c="22"
elif [[ $color == teal      ]]; then   config_class_c="23"
elif [[ $color == yellow    ]]; then   config_class_c="24"
fi

[[ -z $key                ]] && key="$config_key"
[[ -z $bucket_namespace   ]] && bucket_namespace="$(jsaws-get $config '.bucketNamespace')"

if [[ -z $ip ]]; then
  ip="10.${config_class_b}.${config_class_c}.${config_class_d}"
fi

[[ -n $ip                   ]] || die "Missing --ip"
[[ -n $key                  ]] || die "Missing --key"
[[ -n $bucket_namespace     ]] || die "Missing --bucket-namespace"

if [[ -z $namespace ]];then
  [[ -z $NAMESPACE ]] && die "Missing --namespace"

  namespace="$NAMESPACE"
fi

[[ -z $build_number         ]] && build_number="$(jsaws-ec2 getNextBuildNumber --ns=${namespace} | underscore select '.build' --outfmt=text)"
[[ -z $base_name            ]] && base_name="xenial"

amis="/tmp/amis-for-build-${namespace}-${build_number}.json"
jsaws-ec2 getAmiIdsForBuild --namespace="${namespace}" --base-name="${base_name}" > "$amis"
image_id="$(jsaws-get $amis '.base .imageId')"

[[ -n $instance_type        ]] || die "Missing --instance-type"
[[ -n $build_number         ]] || die "Missing --build-number"

# ----- Build up the cli parameters
[[ -n $db                   ]] && run_instance_params="$run_instance_params --db=$db"
[[ -n $util                 ]] && run_instance_params="$run_instance_params --util=$util"
[[ -n $namespace            ]] && run_instance_params="$run_instance_params --namespace=$namespace"
[[ -n $color                ]] && run_instance_params="$run_instance_params --color=$color"
[[ -n $key                  ]] && run_instance_params="$run_instance_params --key=$key"
[[ -n $ip                   ]] && run_instance_params="$run_instance_params --ip=${ip}"
[[ -n $instance_type        ]] && run_instance_params="$run_instance_params --instance-type=$instance_type"
[[ -n $image_id             ]] && run_instance_params="$run_instance_params --image-id=$image_id"

[[ -n $xvdf                 ]] && run_instance_params="$run_instance_params --xvdf=$xvdf"

# -------------------- Run Instance --------------------
echo jsaws-ec2 runInstance $run_instance_params
if [[ -n $dry_run ]]; then
  exit 0
fi

run_instance_result="/tmp/js-cluster-build-instance-$$.json"
jsaws-ec2 runInstance $run_instance_params | tee $run_instance_result | underscore print --color

# Get the actual IP from the result
ip="$(jsaws-get $run_instance_result '.InstanceId ~ .PrivateIpAddress')"
instance_id="$(jsaws-get $run_instance_result '.PrivateIpAddress ~ .InstanceId')"

wait_for_start "$ip"

# Copy buildout scripts
sshix $ip "mkdir -p zz_packages/${on_instance_build_dir} zz_packages/build-logs"
scpix -r ${script_dir}/* "${ip}:~/zz_packages/${on_instance_build_dir}/"

# -------------------- aa-build-all --------------------

build_all_params="$build_all_params ${bucket_namespace} ${service} --namespace=${namespace} --stack=${stack} --service=${service}"

echo jsaws-ssh-run "$ip" "./zz_packages/${on_instance_build_dir}/on-instance/aa-build-all ${build_all_params}" "${service}-build"
jsaws-ssh-run "$ip" "./zz_packages/${on_instance_build_dir}/on-instance/aa-build-all ${build_all_params}" "${service}-build"

# -------------------- Create AMI ----------------------
js_cluster_dir="${script_dir}/../../js-cluster"
${js_cluster_dir}/build-scripts/create-ami "$@" --on-instance-build-dir="${on_instance_build_dir}" --base-name=${base_name} \
        --ip="${ip}" --instance-id="${instance_id}" --stack="${stack}" --service="${service}" --build-number="${build_number}" --namespace="${namespace}"

